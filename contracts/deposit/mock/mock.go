package mock

import (
	"crypto/ecdsa"
	"fmt"
	"math/big"
	"strings"

	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/accounts/abi/bind/backends"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/crypto"
	"github.com/prysmaticlabs/prysm/v4/contracts/deposit"
)

var (
	amount8192FTN      = "8192000000000000000000"
	amountLessThan1Eth = "500000000000000000"
	depositContractBin = "0x6040608081523461013757604180546001600160a01b03191673100000000000000000000000000000000000000217815560005b601f811061004957825161130b908161013d8239f35b6020808210156100ee576021820154845182810182905280860191909152848152606080820191906001600160401b038311828410176101225791839181885280519360005b85811061010f57506000809495830191820152039060025afa156101045760005190600183018084116100d85710156100ee57602282015560001981146100d857600101610033565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b83513d6000823e3d90fd5b828101808601519083015286940161008f565b85634e487b7160e01b60005260045260246000fd5b600080fdfe60806040526004361015610013575b600080fd5b6000803560e01c90816301ffc9a71461008e5750806336a8d23014610085578063621fd1301461007c578063847dbe4d14610073578063c1da06e21461006a5763c5f2892f1461006257600080fd5b61000e6104b8565b5061000e610302565b5061000e61029e565b5061000e61025c565b5061000e610113565b346100e45760203660031901126100e4576004359063ffffffff60e01b82168092036100e457506301ffc9a760e01b81149081156100d3575b50151560805260206080f35b6301a9c46560e71b149050816100c7565b80fd5b600435906001600160a01b038216820361000e57565b602435906001600160a01b038216820361000e57565b503461000e57604036600319011261000e5761012d6100e7565b6101356100fd565b6001600160a01b03828116156101b6576101b4926101596101959284161515610765565b61017b61017461016883610d25565b6001600160a01b031690565b33146107c7565b6001600160a01b0316600090815260426020526040902090565b80546001600160a01b0319166001600160a01b03909216919091179055565b005b60405162461bcd60e51b815260206004820152603060248201527f4465706f736974436f6e74726163743a20436f6e74726163742061646472657360448201526f1cc818d85b9b9bdd081899481b9d5b1b60821b6064820152608490fd5b60005b8381106102275750506000910152565b8181015183820152602001610217565b9060209161025081518092818552858086019101610214565b601f01601f1916010190565b503461000e57600036600319011261000e5761029a61028667ffffffffffffffff60205416610e6f565b604051918291602083526020830190610237565b0390f35b503461000e57602036600319011261000e5760206102c26102bd6100e7565b610d25565b6040516001600160a01b039091168152f35b9181601f8401121561000e5782359167ffffffffffffffff831161000e576020838186019501011161000e57565b5060a036600319011261000e5767ffffffffffffffff60043581811161000e576103309036906004016102d4565b60243583811161000e576103489036906004016102d4565b9160443585811161000e576103619036906004016102d4565b9060643587811161000e5761037a9036906004016102d4565b9590946103896030861461082e565b61039560208314610889565b6103a160148514610889565b6103ad606088146108f4565b6103c26103bb36868661097d565b6014015190565b6001600160a01b0381811661049d575b505034680de0b6b3a76400000011156103ea90610a1c565b88633b9aca00803406156103fd90610a77565b340461040b82821115610adf565b1661041590610e6f565b9481818a6020549c8d1661042890610e6f565b8b8b8b8b8b8b604051998a9961043e998b610b5c565b037f9690c6325860650852f0f0bd0e7d47145a3d0c2c5c92cba852bad61c02928b0991a161046b98610fc6565b906104796084358314610bd0565b61048863ffffffff8210610c5f565b61049190610cb5565b6020556101b490611240565b6104a96104b192610d25565b1633146109b4565b38806103d2565b503461000e576000806003193601126100e4578060209182548083905b8582106105525761029a8587816105288861051c6104fc67ffffffffffffffff8b16610e6f565b9161050e604051938492888401610740565b03601f1981018352826106fe565b60405191828092610720565b039060025afa15610545575b516040519081529081906020820190565b61054d610733565b610534565b6105d190868660019687808516146000146105e4576105ba90610581610577886106a1565b90549060031b1c90565b6105b06040916105a283519485928984019091604092825260208201520190565b03601f1981018452836106fe565b5191828092610720565b039060025afa156105d7575b8551945b1c9161064e565b906104d5565b6105df610733565b6105c6565b610616906105f461057788610681565b906105b06040916105a283519485928984019091604092825260208201520190565b039060025afa1561062a575b8551946105ca565b610632610733565b610622565b50634e487b7160e01b600052601160045260246000fd5b600190600019811461065e570190565b610666610637565b0190565b50634e487b7160e01b600052603260045260246000fd5b6020811015610694575b60210190600090565b61069c61066a565b61068b565b60208110156106b1575b90600090565b6106b961066a565b6106ab565b50634e487b7160e01b600052604160045260246000fd5b6040810190811067ffffffffffffffff8211176106f157604052565b6106f96106be565b604052565b90601f8019910116810190811067ffffffffffffffff8211176106f157604052565b9061066660209282815194859201610214565b506040513d6000823e3d90fd5b6038929181526107598251809360208085019101610214565b01600060208201520190565b1561076c57565b60405162461bcd60e51b815260206004820152602d60248201527f4465706f736974436f6e74726163743a204f776e65722061646472657373206360448201526c185b9b9bdd081899481b9d5b1b609a1b6064820152608490fd5b156107ce57565b60405162461bcd60e51b815260206004820152603260248201527f4465706f736974436f6e74726163743a204f6e6c79206f776e65722063616e2060448201527107472616e73666572206f776e6572736869760741b6064820152608490fd5b1561083557565b60405162461bcd60e51b815260206004820152602660248201527f4465706f736974436f6e74726163743a20696e76616c6964207075626b6579206044820152650d8cadccee8d60d31b6064820152608490fd5b1561089057565b60405162461bcd60e51b815260206004820152603660248201527f4465706f736974436f6e74726163743a20696e76616c696420776974686472616044820152750eec2d8bec6e4cac8cadce8d2c2d8e640d8cadccee8d60531b6064820152608490fd5b156108fb57565b60405162461bcd60e51b815260206004820152602960248201527f4465706f736974436f6e74726163743a20696e76616c6964207369676e6174756044820152680e4ca40d8cadccee8d60bb1b6064820152608490fd5b60209067ffffffffffffffff8111610970575b601f01601f19160190565b6109786106be565b610965565b92919261098982610952565b9161099760405193846106fe565b82948184528183011161000e578281602093846000960137010152565b156109bb57565b60405162461bcd60e51b815260206004820152603360248201527f4465706f736974436f6e74726163743a2073656e6465722073686f756c64206260448201527219481bdddb995c881bd98818dbdb9d1c9858dd606a1b6064820152608490fd5b15610a2357565b60405162461bcd60e51b815260206004820152602660248201527f4465706f736974436f6e74726163743a206465706f7369742076616c756520746044820152656f6f206c6f7760d01b6064820152608490fd5b15610a7e57565b60405162461bcd60e51b815260206004820152603360248201527f4465706f736974436f6e74726163743a206465706f7369742076616c7565206e6044820152726f74206d756c7469706c65206f66206777656960681b6064820152608490fd5b15610ae657565b60405162461bcd60e51b815260206004820152602760248201527f4465706f736974436f6e74726163743a206465706f7369742076616c756520746044820152660dede40d0d2ced60cb1b6064820152608490fd5b908060209392818452848401376000828201840152601f01601f1916010190565b98949095610b95610bbf9894610bb196610b87610bcd9e9c9a610ba3978f60c0908181520191610b3b565b8d810360208f015291610b3b565b918a830360408c0152610b3b565b908782036060890152610237565b918583036080870152610b3b565b9160a0818403910152610237565b90565b15610bd757565b60405162461bcd60e51b815260206004820152605460248201527f4465706f736974436f6e74726163743a207265636f6e7374727563746564204460448201527f65706f7369744461746120646f6573206e6f74206d6174636820737570706c6960648201527319590819195c1bdcda5d17d9185d1857dc9bdbdd60621b608482015260a490fd5b15610c6657565b60405162461bcd60e51b815260206004820152602160248201527f4465706f736974436f6e74726163743a206d65726b6c6520747265652066756c6044820152601b60fa1b6064820152608490fd5b9060018201809211610cc357565b610ccb610637565b565b15610cd457565b60405162461bcd60e51b8152602060048201526024808201527f4465706f736974436f6e74726163743a2043616e6e6f7420676574206465706c60448201526337bcb2b960e11b6064820152608490fd5b6001600160a01b03818116600090815260426020526040812054919290918316610dc457818091601494604154169060405160208101916bffffffffffffffffffffffff199060601b168252868152610d7d816106d5565b51915afa3d15610db757610db2903d610d9581610952565b90610da360405192836106fe565b8152809360203d92013e610ccd565b015190565b9050610db2606091610ccd565b6001600160a01b031660009081526042602052604090209050541690565b602090805115610df0570190565b61066661066a565b602190805160011015610df0570190565b602290805160021015610df0570190565b602390805160031015610df0570190565b602490805160041015610df0570190565b602590805160051015610df0570190565b602690805160061015610df0570190565b602790805160071015610df0570190565b906040516040810181811067ffffffffffffffff821117610f1d575b6040526008815260203681830137610f1a819367ffffffffffffffff60c01b9060c01b168060071a610ebc84610de2565b538060061a610eca84610df8565b538060051a610ed884610e09565b538060041a610ee684610e1a565b538060031a610ef484610e2b565b538060021a610f0284610e3c565b538060011a610f1084610e4d565b5360001a91610e5e565b53565b610f256106be565b610e8b565b908092918237016000815290565b8260109392823701600081520190565b9060401161000e5790604090565b909291928360401161000e57831161000e5760400191603f190190565b8260209392823701600081520190565b9092809260209483528483013701016000815290565b82602494939282370160008152610fba825180936020600c85019101610214565b016000600c8201520190565b602092939496989597836000610fef819561051c6110869661050e604051938492888401610f38565b039060025afa1561121c575b838361105861051c61104583519b858561103061051c61101b858c610f48565b61050e60409392935193849288840191610f2a565b039060025afa1561120f575b80855197610f56565b919061050e604051938492888401610f73565b039060025afa156111c1575b61051c83519161050e6040519384928884019091604092825260208201520190565b039060025afa15611202575b6000519260405192839260208401926110aa93610f83565b03601f19810182526110bc90826106fe565b6040516110ca818093610720565b03905a916000916002602094fa1560006110586020968783611109819961051c6111a29a85996111f5575b61050e855197604051948593898501610f99565b039060025afa156111e8575b838361113c61050e61051c8351996040519283918783016040918152600060208201520190565b039060025afa156111db575b8383611174815197838361117460405161051c8161050e86820160409060008152600060208201520190565b039060025afa156111ce575b61051c83519561050e6040519384928884019091604092825260208201520190565b039060025afa156111b4575b60005190565b6111bc610733565b6111ae565b6111c9610733565b611064565b6111d6610733565b611180565b6111e3610733565b611148565b6111f0610733565b611115565b6111fd610733565b6110f5565b61120a610733565b611092565b611217610733565b61103c565b611224610733565b610ffb565b50634e487b7160e01b600052600160045260246000fd5b60208054600080915b83831061125d575050505050610ccb611229565b60019485808316146112a85790848361127f61129594610581610577896106a1565b039060025afa1561129b575b8251951c9261064e565b91611249565b6112a3610733565b61128b565b93505050610ccb92506112ba906106a1565b90919082549060031b600019811b9283911b1691191617905556fea26469706673582212200660cf5b413bce01dd34a1240304fe94b7e7e1fbe79fb14a17a332bba4c8b44a64736f6c63430008110033"
)

// TestAccount represents a test account in the simulated backend,
// through which we can perform actions on the eth1.0 chain.
type TestAccount struct {
	Addr         common.Address
	ContractAddr common.Address
	Contract     *deposit.DepositContract
	Backend      *backends.SimulatedBackend
	TxOpts       *bind.TransactOpts
}

// Setup creates the simulated backend with the deposit contract deployed
func Setup() (*TestAccount, error) {
	genesis := make(core.GenesisAlloc)
	privKey, err := crypto.GenerateKey()
	if err != nil {
		return nil, err
	}
	pubKeyECDSA, ok := privKey.Public().(*ecdsa.PublicKey)
	if !ok {
		return nil, fmt.Errorf("error casting public key to ECDSA")
	}

	// strip off the 0x and the first 2 characters 04 which is always the EC prefix and is not required.
	publicKeyBytes := crypto.FromECDSAPub(pubKeyECDSA)[4:]
	var pubKey = make([]byte, 48)
	copy(pubKey, publicKeyBytes)

	addr := crypto.PubkeyToAddress(privKey.PublicKey)
	txOpts, err := bind.NewKeyedTransactorWithChainID(privKey, big.NewInt(1337))
	if err != nil {
		return nil, err
	}
	startingBalance, _ := new(big.Int).SetString("100000000000000000000000000000000000000", 10)
	genesis[addr] = core.GenesisAccount{Balance: startingBalance}
	backend := backends.NewSimulatedBackend(genesis, 210000000000)

	contractAddr, _, contract, err := DeployDepositContract(txOpts, backend)
	if err != nil {
		return nil, err
	}
	backend.Commit()

	return &TestAccount{addr, contractAddr, contract, backend, txOpts}, nil
}

// Amount8192FTN returns 8192FTN(in wei) in terms of the big.Int type.
func Amount8192FTN() *big.Int {
	amount, _ := new(big.Int).SetString(amount8192FTN, 10)
	return amount
}

// LessThan1Eth returns less than 1 Eth(in wei) in terms of the big.Int type.
func LessThan1Eth() *big.Int {
	amount, _ := new(big.Int).SetString(amountLessThan1Eth, 10)
	return amount
}

// DeployDepositContract deploys a new Ethereum contract, binding an instance of DepositContract to it.
func DeployDepositContract(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *deposit.DepositContract, error) {
	parsed, err := abi.JSON(strings.NewReader(deposit.DepositContractABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(depositContractBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &deposit.DepositContract{
		DepositContractCaller:     deposit.NewDepositContractCallerFromBoundContract(contract),
		DepositContractTransactor: deposit.NewDepositContractTransactorFromBoundContract(contract),
		DepositContractFilterer:   deposit.NewDepositContractFiltererFromBoundContract(contract),
	}, nil
}
